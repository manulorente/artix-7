KCPSM6 Assembler log file for program 'C:\Users\Manuel\xilinx-workspace\EC42\miASM\sio_rom.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 02 Feb 2020
Assembly timestamp: 11:21:39

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 03A hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 59
Memory locations available: 4037


Assembly listing

 Addr Code                     Instruction

 000                           ;========================================================
 000                           ; MSEEI 2019/20
 000                           ; Diseño de Sistemas Empotrados Basados en FPGAs
 000                           ;
 000                           ; Square circuit with simple I/O interface
 000                           ;========================================================
 000                           ;Program operation:
 000                           ;  - read switch to a (4 MSBs) and b (4 LSBs)
 000                           ;  - calculate a*a + b*b
 000                           ;  - display data on 8 leds
 000                           ;========================================================
 000                           ; Dataconstant
 000                           ;========================================================
 000                           CONSTANT UP_NIBBLE_MASK, 0F      ;00001111
 000                           ;========================================================
 000                           ; Dataram address alias
 000                           ;========================================================
 000                           CONSTANT a_lsb, 00
 000                           CONSTANT b_lsb, 02
 000                           CONSTANT aa_lsb, 04
 000                           CONSTANT aa_msb, 05
 000                           CONSTANT bb_lsb, 06
 000                           CONSTANT bb_msb, 07
 000                           CONSTANT aabb_lsb, 08
 000                           CONSTANT aabb_msb, 09
 000                           CONSTANT aabb_cout, 0A
 000                           ;========================================================
 000                           ; Register alias
 000                           ;========================================================
 000                           ;commonly used local variables
 000                           NAMEREG s0, data                 ;reg for temporary data
 000                           NAMEREG s1, addr                 ;reg for temporary mem & i/o port addr
 000                           NAMEREG s2, i                    ;general purpose loop index
 000                           ;global variables
 000                           NAMEREG sF, sw_in
 000                           ;========================================================
 000                           ; Port alias
 000                           ;========================================================
 000                           ;------------input port definitions----------------------
 000                           CONSTANT sw_port, 01             ;8-bit switches
 000                           ;------------output port definitions---------------------
 000                           CONSTANT led_port, 05
 000                           ;========================================================
 000                           ; Main program
 000                           ;========================================================
 000                           ;Calling hierarchy:
 000                           ;
 000                           ;main
 000                           ;  - clr_data_mem
 000                           ;  - read_switch
 000                           ;      - get_upper_nibble
 000                           ;      - get_lower_nibble
 000                           ;  - square
 000                           ;      - mult_soft
 000                           ;  - write_led
 000                           ;
 000  20005                    CALL 005[clr_data_mem]
 001                  forever: 
 001  2000B                    CALL 00B[read_switch]
 002  2001D                    CALL 01D[square]
 003  2001A                    CALL 01A[write_led]
 004  22001                    JUMP 001[forever]
 005                           ;========================================================
 005                           ;routine: clr_data_mem
 005                           ;  function: clear data ram
 005                           ;  temp register: data, i
 005                           ;========================================================
 005             clr_data_mem: 
 005  01240                    LOAD s2[i], 40                   ;unitize loop index to 64
 006  01000                    LOAD s0[data], 00
 007             clr_mem_loop: 
 007  19201                    SUB s2[i], 01                    ;dec loop index
 008  2E020                    STORE s0[data], (s2[i])
 009  36007                    JUMP NZ, 007[clr_mem_loop]       ;repeat until i=0
 00A  25000                    RETURN 
 00B                           ;========================================================
 00B                           ;routine: read switch
 00B                           ;  function: obatin two nibbles from input
 00B                           ;  input register: sw_in
 00B                           ;  temp register: data
 00B                           ;========================================================
 00B              read_switch: 
 00B  09F01                    INPUT sF[sw_in], 01[sw_port]     ;read switch input
 00C  000F0                    LOAD s0[data], sF[sw_in]
 00D  20013                    CALL 013[get_lower_nibble]
 00E  2F000                    STORE s0[data], 00[a_lsb]        ;store A to data ram
 00F  000F0                    LOAD s0[data], sF[sw_in]
 010  20015                    CALL 015[get_upper_nibble]
 011  2F002                    STORE s0[data], 02[b_lsb]        ;store B to data ram
 012  25000                    RETURN 
 013                           ;========================================================
 013                           ;routine: get_lower_nibble
 013                           ;  function: get lower 4-bit of data
 013                           ;  input register: data
 013                           ;  output register: data
 013                           ;========================================================
 013         get_lower_nibble: 
 013  0300F                    AND s0[data], 0F[UP_NIBBLE_MASK] ;clear upper nibble
 014  25000                    RETURN 
 015                           ;========================================================
 015                           ;routine: get_lupper_nible
 015                           ;  function: get upper 4-bit of in_data
 015                           ;  input register: data
 015                           ;  output register: data
 015                           ;========================================================
 015         get_upper_nibble: 
 015  1400E                    SR0 s0[data]                     ;right shift 4 times
 016  1400E                    SR0 s0[data]
 017  1400E                    SR0 s0[data]
 018  1400E                    SR0 s0[data]
 019  25000                    RETURN 
 01A                           ;========================================================
 01A                           ;routine: write_led
 01A                           ;  function: output 8 LSBs of result to 8 leds
 01A                           ;  temp register: data
 01A                           ;========================================================
 01A                write_led: 
 01A  0B008                    FETCH s0[data], 08[aabb_lsb]
 01B                           ;sr0 data
 01B  2D005                    OUTPUT s0[data], 05[led_port]
 01C  25000                    RETURN 
 01D                           ;========================================================
 01D                           ;routine: square
 01D                           ;  function: calculate a*a + b*b
 01D                           ;     data/result stored in ram started w/ SQ_BASE_ADDR
 01D                           ;  temp register: s3, s4, s5, s6, data
 01D                           ;========================================================
 01D                   square: 
 01D                           ;calculate a*a
 01D  0B300                    FETCH s3, 00[a_lsb]              ;load a
 01E  0B400                    FETCH s4, 00[a_lsb]              ;load a
 01F  20031                    CALL 031[mult_soft]              ;calculate a*a
 020  2F604                    STORE s6, 04[aa_lsb]             ;store lower byte of a*a
 021  2F505                    STORE s5, 05[aa_msb]             ;store upper byte of a*a
 022                           ;calculate b*b
 022  0B302                    FETCH s3, 02[b_lsb]              ;load b
 023  0B402                    FETCH s4, 02[b_lsb]              ;load b
 024  20031                    CALL 031[mult_soft]              ;calculate b*b
 025  2F606                    STORE s6, 06[bb_lsb]             ;store lower byte of b*b
 026  2F507                    STORE s5, 07                     ;store upper byte of b*b
 027                           ;calculate a*a+b*b
 027  0B004                    FETCH s0[data], 04[aa_lsb]       ;get lower byte of a*a
 028  10060                    ADD s0[data], s6                 ;add lower byte of a*a+b*b
 029  2F008                    STORE s0[data], 08[aabb_lsb]     ;store lower byte of a*a+b*b
 02A  0B005                    FETCH s0[data], 05[aa_msb]       ;get upper byte of a*a
 02B  12050                    ADDCY s0[data], s5               ;add upper byte of a*a+b*b
 02C  2F009                    STORE s0[data], 09[aabb_msb]     ;store upper byte of a*a+b*b
 02D  01000                    LOAD s0[data], 00                ;clear data, but keep carry
 02E  13000                    ADDCY s0[data], 00               ;get carry-out from previous +
 02F  2F00A                    STORE s0[data], 0A[aabb_cout]    ;store carry-out of a*a+b*b
 030  25000                    RETURN 
 031                           ;========================================================
 031                           ;routine: mult_soft
 031                           ;  function: 8-bit unsigned multiplier using
 031                           ;           shift-and-add algorithm
 031                           ;  input register:
 031                           ;     s3: multiplicand
 031                           ;     s4: multiplier
 031                           ;  output register:
 031                           ;     s5: upper byte of product
 031                           ;     s6: lower byte of product
 031                           ;  temp register: i
 031                           ;========================================================
 031                mult_soft: 
 031  01500                    LOAD s5, 00                      ;clear s5
 032  01208                    LOAD s2[i], 08                   ;initialize loop index
 033                mult_loop: 
 033  1440E                    SR0 s4                           ;shift lsb to carry
 034  3E036                    JUMP NC, 036[shift_prod]         ;lsb is 0
 035  10530                    ADD s5, s3                       ;lsb is 1
 036               shift_prod: 
 036  14508                    SRA s5                           ;shift upper byte right,
 037                           ;carry to MSB, LSB to carry
 037  14608                    SRA s6                           ;shift lower byte right,
 038                           ;lsb of s5 to MSB of s6
 038  19201                    SUB s2[i], 01                    ;dec loop index
 039  36033                    JUMP NZ, 033[mult_loop]          ;repeat until i=0
 03A  25000                    RETURN 


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\Manuel\xilinx-workspace\EC42\miASM\sio_rom.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   11'd         
 timestamp_minutes 21'd         
 timestamp_seconds 39'd         
 datestamp_year    20'd         
 datestamp_month   2'd          
 datestamp_day     02'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 UP_NIBBLE_MASK    0F           sio_rom.psm
 a_lsb             00           sio_rom.psm
 b_lsb             02           sio_rom.psm
 aa_lsb            04           sio_rom.psm
 aa_msb            05           sio_rom.psm
 bb_lsb            06           sio_rom.psm
 bb_msb            07           sio_rom.psm
 aabb_lsb          08           sio_rom.psm
 aabb_msb          09           sio_rom.psm
 aabb_cout         0A           sio_rom.psm
 sw_port           01           sio_rom.psm
 led_port          05           sio_rom.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "02 Feb 2020"  
 timestamp$        "11:21:39"     



List of line labels

   Label              Addr  Source PSM File

   forever            001   sio_rom.psm
   clr_data_mem       005   sio_rom.psm
   clr_mem_loop       007   sio_rom.psm
   read_switch        00B   sio_rom.psm
   get_lower_nibble   013   sio_rom.psm
   get_upper_nibble   015   sio_rom.psm
   write_led          01A   sio_rom.psm
   square             01D   sio_rom.psm
   mult_soft          031   sio_rom.psm
   mult_loop          033   sio_rom.psm
   shift_prod         036   sio_rom.psm



Instruction usage statistics

 Instruction    Instances

 LOAD              7
 STAR              -

 AND               1
 OR                -
 XOR               -

 ADD               2
 ADDCY             2
 SUB               2
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           -
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               5
 SR1               -
 SRX               -
 SRA               2
 RR                -

 REGBANK           -

 INPUT             1
 OUTPUT            1
 OUTPUTK           -

 STORE             7
 FETCH             7

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              4
 JUMP@             -
 CALL              8
 CALL@             -
 RETURN            7
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
